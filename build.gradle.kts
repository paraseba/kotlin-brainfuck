/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// ...

val compileKotlin: KotlinCompile by tasks
val compileTestKotlin: KotlinCompile by tasks

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.4.10"
    kotlin("kapt") version "1.4.10"
    application
}

allprojects {
    repositories {
        // Use jcenter for resolving dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        maven("https://dl.bintray.com/arrow-kt/arrow-kt/")
        maven ("https://oss.jfrog.org/artifactory/oss-snapshot-local/") // for SNAPSHOT builds
    }


    compileKotlin.kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    compileTestKotlin.kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    tasks.withType<Test> {
        useJUnitPlatform()
    }

}

dependencies {
    implementation(project(":parser-combinators"))
    implementation(project(":parser-combinators-extensions"))

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    //val arrowVersion = "0.11.0"
    val arrowVersion = "1.0.0-SNAPSHOT"
    implementation( "io.arrow-kt:arrow-core:$arrowVersion")
    implementation( "io.arrow-kt:arrow-syntax:$arrowVersion")
    implementation( "io.arrow-kt:arrow-mtl:$arrowVersion")
    implementation( "io.arrow-kt:arrow-fx:$arrowVersion")
    kapt("io.arrow-kt:arrow-meta:$arrowVersion")

    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.3")


    testImplementation("io.kotest:kotest-runner-junit5:4.3.0") // for kotest framework
    testImplementation("io.kotest:kotest-assertions-core:4.3.0") // for kotest core jvm assertions
    testImplementation("io.kotest:kotest-property:4.3.0") // for kotest property test

}


application {
    // Define the main class for the application.
    mainClass.set("brainfuck.AppKt")
}


tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = application.mainClassName
    }

    from(configurations.runtimeClasspath.get().map {if (it.isDirectory) it else zipTree(it)})
}